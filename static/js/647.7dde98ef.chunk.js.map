{"version":3,"file":"static/js/647.7dde98ef.chunk.js","mappings":"uOAIaA,GAAOC,E,QAAAA,GAAOC,EAAAA,GAAPD,CAAH,gQ,8BCJJE,EAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAV,ECGpBC,EAAiB,SAAAF,GAAK,OAAIA,EAAMG,SAASC,KAAnB,EACtBC,EAAkB,SAAAL,GAAK,OAAIA,EAAMG,SAASG,SAAnB,EACvBC,EAAc,SAAAP,GAAK,OAAIA,EAAMG,SAASK,KAAnB,EAEnBC,GAAwBC,EAAAA,EAAAA,IACjC,CAACR,EAAgBH,IACjB,SAACI,EAAUF,GACP,IAAMU,EAAkBV,EAAOW,cAC/B,OAAOT,EAASF,QAAO,SAAAY,GAAO,OAAIA,EAAQC,KAAKF,cAAcG,SAASJ,EAAxC,GACjC,I,mBCFCK,EAASC,EAAAA,KAAaC,MAAM,CAC9BJ,KAAMG,EAAAA,KAAaE,IAAI,GAAGC,IAAI,IAAIC,QAAQ,yHAA8D,0IACxGC,OAAQL,EAAAA,KAAaI,QAAQ,6EAA8E,kGAGlGE,EAAc,WACvB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOV,EAAP,KAAaW,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOF,EAAP,KAAeI,EAAf,KAEMvB,GAAWwB,EAAAA,EAAAA,IAAYzB,GAEvB0B,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAACC,GAClB,OAAQA,EAAEC,OAAOlB,MACb,IAAK,OACDW,EAAQM,EAAEC,OAAOC,OACjB,MACJ,IAAK,SACDP,EAAUK,EAAEC,OAAOC,OACnB,MACJ,QACI,OAEX,EAiBKC,EAAY,WACdT,EAAQ,IACRC,EAAU,GACX,EAEH,OACI,+BACI,SAAC,KAAD,CACIS,cAAe,CACXrB,KAAM,GACNQ,OAAQ,IAEZc,iBAAkBpB,EAClBqB,SA5BU,WAClB,GAAKvB,EAAKwB,QAAWhB,EAAOgB,OAA5B,CAIA,GAAInC,EAASoC,MAAK,SAAAC,GAAI,OAAIA,EAAK1B,OAASA,CAAlB,IAGlB,OAFA2B,MAAM,GAAD,OAAI3B,EAAJ,kCACLoB,IAIJN,GAASc,EAAAA,EAAAA,IAAW,CAAC5B,KAAAA,EAAMQ,OAAAA,EAAQqB,IAAIC,EAAAA,EAAAA,SACvCV,GATC,CAUJ,EASO,UAQI,UAACtC,EAAD,YACI,qCAEI,kBACIiD,KAAK,OACL/B,KAAK,OACLgC,SAAUhB,EACVG,MAAOnB,EACPiC,UAAQ,KAEZ,SAAC,KAAD,CAAcjC,KAAK,aAEvB,uCAEI,kBACI+B,KAAK,MACL/B,KAAK,SACLiC,UAAQ,EACRD,SAAUhB,EACVG,MAAOX,KAEX,SAAC,KAAD,CAAcR,KAAK,eAEvB,mBAAQ+B,KAAK,SAAb,+BAKnB,EC1FYG,EAAc,WACvB,IAAMpB,GAAWC,EAAAA,EAAAA,MACXoB,GAAkBtB,EAAAA,EAAAA,IAAYlB,GAMpC,OACI,eAAIyC,MAAO,CAAC,UAAa,QAAzB,SAEQD,EAAgBE,KAAI,WAAuBC,GAAvB,IAAGT,EAAH,EAAGA,GAAI7B,EAAP,EAAOA,KAAMQ,EAAb,EAAaA,OAAb,OAChB,gBAAa4B,MAAO,CAAC,OAAU,iBAAkB,MAAS,QAAS,QAAW,OAA9E,WACI,yBAAIE,EAAE,EAAN,KAAWtC,EAAX,KAAmBQ,MACnB,mBAAQ+B,QAAS,kBAVVC,EAUkCX,OATzDf,GAAS2B,EAAAA,EAAAA,IAAcD,IADD,IAACA,CAUU,EAAjB,sBAFKX,EADO,KASnC,E,UCpBYa,EAAS,WAClB,IAAMvD,GAAS0B,EAAAA,EAAAA,IAAY5B,GAErB6B,GAAWC,EAAAA,EAAAA,MAMjB,OACI,8BACI,iBAAMqB,MAAO,CAAC,YAAe,OAA7B,qBACA,kBAAOL,KAAK,OAAO/B,KAAK,SAASmB,MAAOhC,EAAQ6C,SAPnC,SAACf,GAClBH,GAAS6B,EAAAA,EAAAA,GAAU1B,EAAEC,OAAOC,OAC/B,MAQJ,ECXc,SAASyB,IACpB,IAAMvD,GAAWwB,EAAAA,EAAAA,IAAYzB,GACvBI,GAAYqB,EAAAA,EAAAA,IAAYtB,GACxBG,GAAQmB,EAAAA,EAAAA,IAAYpB,GACpBqB,GAAWC,EAAAA,EAAAA,MAMjB,OAJA8B,EAAAA,EAAAA,YAAU,WACN/B,GAASgC,EAAAA,EAAAA,MACZ,GAAE,CAAChC,KAGA,iCACI,SAACL,EAAD,KACA,4BACI,uCAAepB,EAASmC,OAASnC,EAASmC,OAAS,cACnD,SAACkB,EAAD,IACClD,IAAcE,IAAS,qDACxB,SAACwC,EAAD,SAIf,C","sources":["components/ContactForm/ContactForm.styled.js","redux/filter/selectors.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import { Form as FormikForm } from \"formik\";\n\nimport styled from \"@emotion/styled\";\n\nexport const Form = styled(FormikForm)`\n    border: 1px solid grey;\n    padding: 8px;\n    width: 400px;\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n    margin: 0 auto;\n\n    label {\n        display: flex;\n        flex-direction: column;\n    }\n`;","export const selectFilter = state => state.filter;","import { createSelector } from \"@reduxjs/toolkit\";\nimport { selectFilter } from \"redux/filter/selectors\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n        const normalizeFilter = filter.toLowerCase();\n        return contacts.filter(contact => contact.name.toLowerCase().includes(normalizeFilter));\n    }\n)\n","import { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\n\nimport { Form } from './ContactForm.styled';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst schema = Yup.object().shape({\n    name: Yup.string().min(2).max(30).matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"),\n    number: Yup.string().matches(/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/, \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\")\n});\n\nexport const ContactForm = () => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const contacts = useSelector(selectContacts);\n\n    const dispatch = useDispatch();\n\n    const handleChange = (e) => {\n        switch (e.target.name) {\n            case 'name':\n                setName(e.target.value);\n                break;\n            case 'number':\n                setNumber(e.target.value);\n                break;\n            default:\n                return;\n        }\n    }\n\n    const addNewContact = () => {\n        if (!name.length && !number.length) {\n            return;\n        }\n\n        if (contacts.find(item => item.name === name)) {\n            alert(`${name} is already in contacts.`);\n            resetForm();\n            return;\n        }\n        \n        dispatch(addContact({name, number, id: nanoid()}))\n        resetForm();\n    }\n\n    const resetForm = () => {\n        setName('');\n        setNumber('');\n      }\n\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    name: '',\n                    number: ''\n                }}\n                validationSchema={schema}\n                onSubmit={addNewContact}\n            >\n                <Form>\n                    <label>\n                        Name\n                        <input\n                            type=\"text\"\n                            name=\"name\"\n                            onChange={handleChange}\n                            value={name}\n                            required\n                        />\n                        <ErrorMessage name='name' />\n                    </label>\n                    <label>\n                        Number\n                        <input\n                            type=\"tel\"\n                            name=\"number\"\n                            required\n                            onChange={handleChange}\n                            value={number}\n                        />\n                        <ErrorMessage name='number' />\n                    </label>\n                    <button type='submit'>Add contact</button>\n                </Form>\n            </Formik>\n        </>\n    )\n}","import { useDispatch, useSelector } from \"react-redux\";\nimport { deleteContact } from \"redux/contacts/operations\";\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\n\nexport const ContactList = () => {\n    const dispatch = useDispatch();\n    const visibleContacts = useSelector(selectVisibleContacts);\n\n    const deleteContactById = (contactId) => {\n        dispatch(deleteContact(contactId));\n    }\n\n    return (\n        <ul style={{'listStyle': 'none'}}>\n            {\n                visibleContacts.map(({ id, name, number }, i) => (\n                    <li key={id} style={{'border': '1px solid grey', 'width': '350px', 'padding': '4px'}}>\n                        <p>{i+1}) {name}: {number}</p>\n                        <button onClick={() => deleteContactById(id)}>Delete</button>\n                    </li>\n                ))\n            }\n        </ul>\n    );\n}","import { useDispatch, useSelector } from \"react-redux\"\nimport { setFilter } from \"redux/filter/slice\";\nimport { selectFilter } from \"redux/filter/selectors\";\n\nexport const Filter = () => {\n    const filter = useSelector(selectFilter);\n\n    const dispatch = useDispatch();\n\n    const changeFilter = (e) => {\n        dispatch(setFilter(e.target.value));\n    }\n\n    return (\n        <label>\n            <span style={{'marginRight': '4px'}}>Filter</span>\n            <input type=\"text\" name='filter' value={filter} onChange={changeFilter} />\n        </label>\n    )\n}","import { ContactForm } from \"components/ContactForm/ContactForm\"\nimport { ContactList } from \"components/ContactList/ContactList\"\nimport { Filter } from \"components/Filter/Filter\"\nimport { useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { fetchContacts } from \"redux/contacts/operations\"\nimport { selectContacts, selectError, selectIsLoading } from \"redux/contacts/selectors\"\n\nexport default function Contacts() {\n    const contacts = useSelector(selectContacts);\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch]);\n\n    return (\n        <>\n            <ContactForm />\n            <div>\n                <h2>Contacts: {contacts.length ? contacts.length : 'no data'}</h2>\n                <Filter />\n                {isLoading && !error && <div>Request in progress...</div>}\n                <ContactList />\n            </div>\n        </>\n    )\n}"],"names":["Form","styled","FormikForm","selectFilter","state","filter","selectContacts","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","normalizeFilter","toLowerCase","contact","name","includes","schema","Yup","shape","min","max","matches","number","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleChange","e","target","value","resetForm","initialValues","validationSchema","onSubmit","length","find","item","alert","addContact","id","nanoid","type","onChange","required","ContactList","visibleContacts","style","map","i","onClick","contactId","deleteContact","Filter","setFilter","Contacts","useEffect","fetchContacts"],"sourceRoot":""}